// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package internalhttp

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	storage "github.com/trb1maker/otus_golang_home_work/hw12_13_14_15_calendar/internal/storage"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(in *jlexer.Lexer, out *dto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = bool(in.Bool())
		case "details":
			out.Details = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]storage.Event, 0, 0)
					} else {
						out.Events = []storage.Event{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 storage.Event
					(v1).UnmarshalEasyJSON(in)
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(out *jwriter.Writer, in dto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ok))
	}
	if in.Details != "" {
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		out.String(string(in.Details))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComTrb1makerOtusGolangHomeWorkHw12131415CalendarInternalServerHttp(l, v)
}
